# Homing Override for dockable probe
[homing_override]
axes: xyz
gcode:
    {% set _u_vars = printer["gcode_macro _USER_VARIABLES"] %}
    {% set _config = printer.configfile.config %}
    {% set _settings = printer.configfile.settings %}
    {% set verbose = _u_vars.verbose %}
    {% set probe_type_enabled = _u_vars.probe_type_enabled %}
    {% set homing_zhop = _u_vars.homing_zhop|float|abs %}
    {% set homing_travel_speed = _u_vars.homing_travel_speed * 60 %}
    {% set homing_travel_accel = _u_vars.homing_travel_accel %}
    {% set z_drop_speed = _u_vars.z_drop_speed * 60 %}
    {% set status_leds_enabled = _u_vars.status_leds_enabled %}
    {% set bed_mesh_enabled = _u_vars.bed_mesh_enabled %}

    {% set axes_order = 'YX' if _u_vars.homing_first|string|upper == 'Y' else 'XY' %}
    {% set homing_backoff = {'X': (_u_vars.homing_backoff_distance_xy|map('float')|list)[0], 
                             'Y': (_u_vars.homing_backoff_distance_xy|map('float')|list)[1]} %}
    {% set position_endstop = { 'X' : _config.stepper_x.position_endstop|float,
                                'Y' : _config.stepper_y.position_endstop|float } %}
    {% set x_position_center = printer.toolhead.axis_maximum.x|int/2 - printer.toolhead.axis_minimum.x|int/2 %}
    {% set y_position_center = printer.toolhead.axis_maximum.y|int/2 - printer.toolhead.axis_minimum.y|int/2 %}

    # Abort if homing_firt not properly set    
    {% if not _u_vars.homing_first|string|upper in 'XY' %}
        { action_raise_error("Axis homing order not valid. Choose either X or Y first in the variables.cfg file!") }
    {% endif %}

    # reset parameters
    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="HOMING"
    {% endif %}

    # which axes have been requested for homing
    {% set REQUEST_AXES = {} %}
    {% for axis in 'XYZ' %}
        {% set _= REQUEST_AXES.update({axis : axis in params}) %}
    {% endfor %}
    # if no params set all axes
    {% if REQUEST_AXES.values()|sum in [0,3] %}
        {% set REQUEST_AXES = {'X': True, 'Y': True, 'Z': True} %}
    {% endif %}

    {% if probe_type_enabled in ["dockable","dockable_virtual"] %}
       _CHECK_PROBE action=query
       _PROBE_UNLOCK
       _ENTRY_POINT FUNCTION=homing_override
    {% endif %}

    # Set the homing acceleration prior to any movement
    {% set saved_accel = printer.toolhead.max_accel %}
    SET_VELOCITY_LIMIT ACCEL={homing_travel_accel}

    {% if bed_mesh_enabled %}
        BED_MESH_CLEAR
    {% endif %}

    G90

    {% if REQUEST_AXES['Z'] %}
        {% if ('z' in printer.toolhead.homed_axes) %}
            {% if (printer.toolhead.position.z < homing_zhop) %}
                {% if verbose %}
                    RESPOND TYPE=command MSG="Z too low, performing ZHOP to rehome Z"
                {% endif %}
                G91
                G0 Z{homing_zhop} F{z_drop_speed}
                G90
            {% else %}
            {% if verbose %}
                RESPOND TYPE=command MSG=Z already safe, no ZHOP needed to rehome Z"
            {% endif %}
        {% elif ('xy' in printer.toolhead.homed_axes) %}
            {% if verbose %}
                RESPOND TYPE=command MSG=X and Y already homed, no ZHOP needed to home Z"
            {% endif %}
        {% else %}
            {% if verbose %}
                RESPOND TYPE=command MSG="X and Y not homed, forcing full G28 to home Z properly"
            {% endif %}
            SET_KINEMATIC_POSITION X=0 Y=0 Z=0
            G0 Z{homing_zhop} F{z_drop_speed}
            {% set REQUEST_AXES = {'X': True, 'Y': True, 'Z': True} %}
        {% endif %}
        M400    # required for sensorless corexz, no impact on other kinematics
    {% endif %}

    {% for axis in axes_order %}
        {% if REQUEST_AXES[axis] %}
            {% if verbose %}
                RESPOND TYPE=command MSG="Homing {axis}"
            {% endif %}
            
            _PRE_HOME_XY HOMED_AXIS={axis}
            G28 {axis}0
            G0 {axis}{position_endstop[axis] + homing_backoff[axis]} F{homing_travel_speed}
            _POST_HOME_XY HOMED_AXIS={axis}
        {% endif %}
    {% endfor %}


    # Home z
    {% if REQUEST_AXES['Z'] %}
        {% if verbose %}
            RESPOND TYPE=command MSG="Homing Z"
        {% endif %}

        # If there is a virtual probe endstop (ie. TAP or inductive as virtual), we go to the center of the bed
        # If the Z endstop is not virtual, then we just move to it
        {% if _config.stepper_z.endstop_pin|lower == "probe:z_virtual_endstop" %}
            # If our virtual endstop is a dockable probe, we need to activate it first
            # If it's the voron tap, we put it to a safe temperature
            {% if probe_type_enabled in ["dockable_virtual","vorontap"] %}
                ACTIVATE_PROBE
            {% endif %}

            # If there is a bed_mesh enabled and a zero_reference_position set, we retrieve it to home on it
            # Else, we default to the center of the bed
            {% if not bed_mesh_enabled or not _config.bed_mesh.zero_reference_position %}
                G0 X{x_position_center} Y{y_position_center} F{homing_travel_speed}
            {% else %}
                {% set ZRPx, ZRPy = _config.bed_mesh.zero_reference_position.split(',')|map('trim')|map('float') %}
                G0 X{ZRPx} Y{ZRPy} F{homing_travel_speed}
            {% endif %}

        # Else, go to the Z endstop physical pin
        {% else %}
            _GOTO_Z_PROBE
        {% endif %}

        G28 Z0

        G91
        {% if _settings.stepper_z.homing_positive_dir == False %}
            G0 Z{homing_zhop} F{z_drop_speed} # small Z hop to avoid grinding the bed (as we should be close to Z0 right now)
        {% elif _settings.stepper_z.homing_positive_dir == True %}
            G0 Z-{homing_zhop} F{z_drop_speed} # small Z move in the opposite direction to avoid staying on the endstop (not dangerous since we should be at Z max)
        {% endif %}
        G90

        # if voron tap, restore original temperature
        # if dockable probe as virtual endstop, then dock the probe
        {% if probe_type_enabled in ["dockable_virtual","vorontap"] %}
            DEACTIVATE_PROBE
        {% endif %}
    {% endif %}


    # Reset acceleration values to what it was before
    SET_VELOCITY_LIMIT ACCEL={saved_accel}

    {% if probe_type_enabled  in ["dockable","dockable_virtual"] %}
        _CHECK_PROBE action=query
        _EXIT_POINT FUNCTION=homing_override
    {% endif %}

    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="READY"
    {% endif %}


[gcode_macro _GOTO_Z_PROBE]
description: Move to z probe avoiding the probe dock
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    # If the auto z calibration plugin is enabled, then we use the z endstop coordinates set in its config section [z_calibration]
    # Else we fall back on the variable_zendstop_position set in the variables.cfg file
    {% set zcalib_plugin_enabled = printer["gcode_macro _USER_VARIABLES"].zcalib_plugin_enabled %}
    {% if zcalib_plugin_enabled %}
        {% set z_endstop_x, z_endstop_y = printer["configfile"].config["z_calibration"]["nozzle_xy_position"].split(',')|map('trim')|map('float') %}
    {% else %}
        {% set z_endstop_x, z_endstop_y = printer["gcode_macro _USER_VARIABLES"].zendstop_position|map('float') %}
    {% endif %}

    {% set homing_travel_speed = printer["gcode_macro _USER_VARIABLES"].homing_travel_speed|float * 60 %}

    {% set probe_dock_location_x, probe_dock_location_y = printer["gcode_macro _USER_VARIABLES"].probe_dock_location_xy|map('float') %}
    {% set probe_dock_margin_x, probe_dock_margin_y = printer["gcode_macro _USER_VARIABLES"].probe_dock_margin_xy|map('float') %}

    {% set current_x = printer.toolhead.position.x|float %}
    {% set current_y = printer.toolhead.position.y|float %}

    SAVE_GCODE_STATE NAME=goto_ZProbe
    G90

    # check if toolhead have to avoid the dock
    {% set avoid_dock = false %}
    {% if probe_dock_location_x < z_endstop_x|float %}
        #dock on left
        #toolhead on right of dock ?
        {% if current_x < (probe_dock_location_x + probe_dock_margin_x) %}
            {% set avoid_dock = true %}
        {% endif %}
    {% else %}
        #dock on right
        #toolhead on left of dock ?
        {% if current_x > (probe_dock_location_x - probe_dock_margin_x) %}
            {% set avoid_dock = true %}
        {% endif %}
    {% endif %}


    {% if avoid_dock == true  %}
        { action_respond_info("Avoiding probe dock to home Z...") if verbose }
        G0 Y{probe_dock_location_y - probe_dock_margin_y} F{homing_travel_speed}
        G0 X{z_endstop_x} F{homing_travel_speed}
    {% endif %}

    G0 X{z_endstop_x} Y{z_endstop_y} F{homing_travel_speed}

    RESTORE_GCODE_STATE NAME=goto_ZProbe

[gcode_macro _PRE_HOME_XY]
gcode:

[gcode_macro _POST_HOME_XY]
gcode: