[gcode_macro CLEAN_NOZZLE]
description: Wipe the nozzle on the brush
gcode:
    {% set _u_vars = printer["gcode_macro _USER_VARIABLES"] %}
    {% set purge_and_brush_enabled = _u_vars.purge_and_brush_enabled %}
    {% set purgeclean_servo_enabled = _u_vars.purgeclean_servo_enabled %}
    {% set status_leds_enabled = _u_vars.status_leds_enabled %}
    {% set brush_clean_accel = _u_vars.brush_clean_accel %}

    {% set brushes = _u_vars.brushes|default(6)|int %}
    {% set verbose = _u_vars.verbose %}
    {% set cleaning_type = _u_vars.cleaning_type|default("standard") %}
    {% set Bx, By, Bz = _u_vars.brush_xyz|map('float') %}  
    {% set brush_size  = {'X': _u_vars.brush_size[0]|float|default(40), 
                        'Y': _u_vars.brush_size[1]|float|default(10)} %}    


    {% if purge_and_brush_enabled %}
        {% set St = _u_vars.travel_speed * 60 %}
        {% set Sz = _u_vars.z_drop_speed * 60 %}
        {% set Sc = _u_vars.brush_clean_speed * 60 %}


        {% if status_leds_enabled %}
            STATUS_LEDS COLOR="CLEANING"
        {% endif %}

        {% if verbose %}
            RESPOND MSG="Nozzle cleaning..."
        {% endif %}

        # Set the cleaning acceleration prior to any movement
        {% set saved_accel = printer.toolhead.max_accel %}
        SET_VELOCITY_LIMIT ACCEL={brush_clean_accel}

        # Move to purge zone (left side)
        G90
        _CONDITIONAL_MOVE_TO_PURGE_BUCKET Z_DROP=1

        {% if cleaning_type == "standard" %}
            {% set brush_over_y_axis = _u_vars.brush_over_y_axis %}
            {% set brush_offset = _u_vars.brush_center_offset|default(0)|float %}        

            {% set Bx = Bx + brush_offset %}

            # Move to center of the brush
            G1 X{Bx} Y{By} F{St}
            G1 Z{Bz} F{St}
            # Wipe procedure
            G91
            {% if brush_over_y_axis %}
                {% for wipe in range(brushes) %}
                    G1 Y-{ brush_size.Y/2 } F{Sc}
                    G1 Y+{ brush_size.Y/2 } F{Sc}
                {% endfor %}
            {% endif %}

            # Move to the right side of the brush
            {% if brush_offset < 0 %} # brush center biased towards 0
                G1 X+{ brush_size.X/2 } F{Sc}
            {% else %}                # brush center biased towards x_max
                G1 X+{ brush_size.X/2 - brush_offset} F{Sc}
            {% endif %}

            # Brush procedure
            {% for wipe in range(brushes) %}
                G1 X-{ brush_size.X - brush_offset } F{Sc}
                G1 X+{ brush_size.X - brush_offset } F{Sc}
            {% endfor %}
        {% endif %}

        {% if cleaning_type == "zigzag" %}
            # Move to the top left of the brush
            G1 X{Bx -  brush_size.X/2  } Y{By + brush_size.Y/2 } F{St}
            G1 Z{Bz} F{St}

            G91

            # Wipe procedure
            {% for wipe in range(brushes) %}
                G1 X+{ brush_size.X } Y-{brush_size.Y /(brushes*2) } F{Sc}
                G1 X-{ brush_size.X } Y-{brush_size.Y /(brushes*2) } F{Sc}
            {% endfor %}

        {% endif %}

        G90
		_CONDITIONAL_MOVE_TO_PURGE_BUCKET Z_DROP=1
		
        # Reset acceleration values to what it was before
        SET_VELOCITY_LIMIT ACCEL={saved_accel}

        {% if purgeclean_servo_enabled %}
            _SERVO_RETRACT ITEM="clean"
        {% endif %}
    {% endif %}

    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="READY"
    {% endif %}


[gcode_macro PURGE]
description: Purge a specific amount of filament ontop of the purge bucket
gcode:
    {% set _u_vars = printer["gcode_macro _USER_VARIABLES"] %}
    {% set DISTANCE = params.DISTANCE|default(_u_vars.purge_distance)|int %}
    {% set RETRACT = params.RETRACT|default(_u_vars.purge_retract_distance)|int %}
    {% set PURGE_SPEED = params.PURGE_SPEED|default(_u_vars.purge_speed)|int %}
    {% set OOZE_TIME = params.OOZE_TIME|default(_u_vars.purge_ooze_time)|int %}
    {% set TEMP = params.TEMP|default(_u_vars.print_default_extruder_temp)|float %}
    {% set Z_DROP = params.Z_DROP|default(1)|int %}

    {% set purge_and_brush_enabled = _u_vars.purge_and_brush_enabled %}
    {% set purgeclean_servo_enabled = _u_vars.purgeclean_servo_enabled %}
    {% set status_leds_enabled = _u_vars.status_leds_enabled %}
    {% set filament_sensor_enabled = _u_vars.filament_sensor_enabled %}
    {% set re_enable_filament_sensor = 0 %}
    {% set verbose = _u_vars.verbose %}

    {% if purge_and_brush_enabled %}
        {% set St = _u_vars.travel_speed * 60 %}
        {% set Sz = _u_vars.z_drop_speed * 60 %}
        
        {% if status_leds_enabled %}
            STATUS_LEDS COLOR="CLEANING"
        {% endif %}
        
        {% if verbose %}
            RESPOND MSG="Purge filament..."
        {% endif %}

        {% if filament_sensor_enabled %}
            {% if (printer['filament_motion_sensor runout_sensor'] is defined and printer['filament_motion_sensor runout_sensor'].enabled) or (printer['filament_switch_sensor runout_sensor'] is defined and printer['filament_switch_sensor runout_sensor'].enabled) %}
                SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=0
                {% set re_enable_filament_sensor = 1 %}
            {% endif %}
        {% endif %}

        G90

        _CONDITIONAL_MOVE_TO_PURGE_BUCKET Z_DROP={Z_DROP}

        # Heat if needed and purge
        _LOW_TEMP_CHECK T={TEMP}
        G92 E0
        G1 E{DISTANCE|float} F{PURGE_SPEED*60}

        # Retract
        G92 E0
        G1 E-1.7 F2100
        G1 E-{RETRACT|float-1.7} F{PURGE_SPEED*60}
        G92 E0

        # Wait some time to let the nozzle ooze before cleaning
        # No M400 needed here since G4 is also flushing Klipper's buffer
        G4 P{OOZE_TIME * 1000}

        {% if filament_sensor_enabled and re_enable_filament_sensor %}
            SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=1
        {% endif %}

        {% if purgeclean_servo_enabled %}
            _SERVO_RETRACT ITEM="purge"
        {% endif %}
    {% endif %}

    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="READY"
    {% endif %}


[gcode_macro _CONDITIONAL_MOVE_TO_PURGE_BUCKET]
description: Move over the purge bucket
gcode:
    {% set _u_vars = printer["gcode_macro _USER_VARIABLES"] %}
    {% set Z_DROP = params.Z_DROP|default(1)|int %}

    {% set St = _u_vars.travel_speed * 60 %}
    {% set Sz = _u_vars.z_drop_speed * 60 %}
    {% set purge_and_brush_enabled = _u_vars.purge_and_brush_enabled %}
    {% set purgeclean_servo_enabled = _u_vars.purgeclean_servo_enabled %}
    {% set Px, Py, Pz = _u_vars.purge_bucket_xyz|map('float') %}

    # Move to purge zone only if it's available, else just purge where the toolhead is
    {% if purge_and_brush_enabled %}
        SAVE_GCODE_STATE NAME=CONDITIONAL_MOVE_TO_PURGE_BUCKET_STATE
        G90

        {% if Z_DROP == 1 %}
            {% if purgeclean_servo_enabled %}
                G1 Z{Pz} F{Sz} # Secure the Z before deploying the servo
                _SERVO_DEPLOY ITEM="purge"
            {% endif %}
            G1 X{Px} Y{Py} F{St}
            G1 Z{Pz} F{St}
        {% else %}
            # If Z_DROP=0 there is probably some parts on the bed: we do not move the
            # Z axis and purge from an higher position. Also it's risky to use the
            # servo, so better to not do it here...
            G1 X{Px} Y{Py} F{St}
        {% endif %}

        RESTORE_GCODE_STATE NAME=CONDITIONAL_MOVE_TO_PURGE_BUCKET_STATE
    {% endif %}